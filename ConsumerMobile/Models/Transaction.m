//
//  ConsumerMobile
//
//  This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
//
#import "Transaction.h"

@implementation Transaction

/**
* TODO: Write general description for this method
*/
@synthesize mid;

/**
* TODO: Write general description for this method
*/
@synthesize description;

/**
* TODO: Write general description for this method
*/
@synthesize code;

/**
* TODO: Write general description for this method
*/
@synthesize status;

/**
* TODO: Write general description for this method
*/
@synthesize disputeStatus;

/**
* TODO: Write general description for this method
*/
@synthesize disputeEligibility;

/**
* TODO: Write general description for this method
*/
@synthesize transactionType;

/**
* TODO: Write general description for this method
*/
@synthesize transactionTypeFormatted;

/**
* TODO: Write general description for this method
*/
@synthesize cardFraudStatus;

/**
* TODO: Write general description for this method
*/
@synthesize cardLast4Digits;

/**
* TODO: Write general description for this method
*/
@synthesize metaData;

/**
* TODO: Write general description for this method
*/
@synthesize merchant;

/**
* TODO: Write general description for this method
*/
@synthesize amount;

/**
* TODO: Write general description for this method
*/
@synthesize dateTransaction;

/**
* TODO: Write general description for this method
*/
@synthesize datePosted;

/**
* TODO: Write general description for this method
*/
@synthesize creditCard;

/**
* TODO: Write general description for this method
*/
@synthesize cashback;

/**
* TODO: Write general description for this method
*/
@synthesize challenges;

-(id)init
{
    if (self = [super init])
    {
        self.disputeEligibility = YES;
    }
    return self;
}

 /**
 * For serialization of enum StatusEnum type property as NSString*
 */
-(id) JSONObjectForStatus
{
     
    return [StatusEnumHelper stringFromStatusEnum:(enum StatusEnum) status withDefault: nil];

}

/**
 * For deserialization of enum StatusEnum type property from NSString*
 */
 
-(void)setStatusWithNSString:(NSString*) strValue
{
    status = [StatusEnumHelper statusEnumFromString:(NSString*) strValue];
}


 /**
 * For serialization of enum DisputeStatusEnum type property as NSString*
 */
-(id) JSONObjectForDisputeStatus
{
     
    return [DisputeStatusEnumHelper stringFromDisputeStatusEnum:(enum DisputeStatusEnum) disputeStatus withDefault: nil];

}

/**
 * For deserialization of enum DisputeStatusEnum type property from NSString*
 */
 
-(void)setDisputeStatusWithNSString:(NSString*) strValue
{
    disputeStatus = [DisputeStatusEnumHelper disputeStatusEnumFromString:(NSString*) strValue];
}


 /**
 * For serialization of enum TransactionTypeEnum type property as NSString*
 */
-(id) JSONObjectForTransactionType
{
     
    return [TransactionTypeEnumHelper stringFromTransactionTypeEnum:(enum TransactionTypeEnum) transactionType withDefault: nil];

}

/**
 * For deserialization of enum TransactionTypeEnum type property from NSString*
 */
 
-(void)setTransactionTypeWithNSString:(NSString*) strValue
{
    transactionType = [TransactionTypeEnumHelper transactionTypeEnumFromString:(NSString*) strValue];
}


 /**
 * For serialization of enum TransactionTypeFormattedEnum type property as NSString*
 */
-(id) JSONObjectForTransactionTypeFormatted
{
     
    return [TransactionTypeFormattedEnumHelper stringFromTransactionTypeFormattedEnum:(enum TransactionTypeFormattedEnum) transactionTypeFormatted withDefault: nil];

}

/**
 * For deserialization of enum TransactionTypeFormattedEnum type property from NSString*
 */
 
-(void)setTransactionTypeFormattedWithNSString:(NSString*) strValue
{
    transactionTypeFormatted = [TransactionTypeFormattedEnumHelper transactionTypeFormattedEnumFromString:(NSString*) strValue];
}


 /**
 * For serialization of enum CardFraudStatusEnum type property as NSString*
 */
-(id) JSONObjectForCardFraudStatus
{
     
    return [CardFraudStatusEnumHelper stringFromCardFraudStatusEnum:(enum CardFraudStatusEnum) cardFraudStatus withDefault: nil];

}

/**
 * For deserialization of enum CardFraudStatusEnum type property from NSString*
 */
 
-(void)setCardFraudStatusWithNSString:(NSString*) strValue
{
    cardFraudStatus = [CardFraudStatusEnumHelper cardFraudStatusEnumFromString:(NSString*) strValue];
}




/**
* Key mappings for the json serialization and deserialization
*/
+(NSDictionary*) keyMap
{
    NSMutableDictionary* map = [[NSMutableDictionary alloc] init];
    [map addEntriesFromDictionary: @{
        @"id": @"mid",
        @"description": @"description",
        @"code": @"code",
        @"status": @"status",
        @"dispute_status": @"disputeStatus",
        @"dispute_eligibility": @"disputeEligibility",
        @"transaction_type": @"transactionType",
        @"transaction_type_formatted": @"transactionTypeFormatted",
        @"card_fraud_status": @"cardFraudStatus",
        @"card_last_4_digits": @"cardLast4Digits",
        @"meta_data": @"metaData",
        @"merchant": @"merchant",
        @"amount": @"amount",
        @"date_transaction": @"dateTransaction",
        @"date_posted": @"datePosted",
        @"credit_card": @"creditCard",
        @"cashback": @"cashback",
        @"challenges": @"challenges"  
    }];

    return map;
}

/**
* Key mapper for json serialization and deserialization
*/
+(JSONKeyMapper*) keyMapper
{ 
  return [[JSONKeyMapper alloc] initWithDictionary: [self keyMap]];
}

/**
* Helps avoiding deserialization errors when one or more properties are missing
* @returns	True, indicating that all properties are optional for deserialization
*/
+(BOOL)propertyIsOptional:(NSString*) propertyName
{
    return YES;
}

@end