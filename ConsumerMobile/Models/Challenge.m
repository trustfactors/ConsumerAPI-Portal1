//
//  ConsumerMobile
//
//  This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
//
#import "Challenge.h"

@implementation Challenge

/**
* TODO: Write general description for this method
*/
@synthesize mid;

/**
* TODO: Write general description for this method
*/
@synthesize transactionId;

/**
* TODO: Write general description for this method
*/
@synthesize memonotes;

/**
* TODO: Write general description for this method
*/
@synthesize reason;

/**
* TODO: Write general description for this method
*/
@synthesize type;

 /**
 * For serialization of enum TypeEnum type property as NSString*
 */
-(id) JSONObjectForType
{
     
    return [TypeEnumHelper stringFromTypeEnum:(enum TypeEnum) type withDefault: nil];

}

/**
 * For deserialization of enum TypeEnum type property from NSString*
 */
 
-(void)setTypeWithNSString:(NSString*) strValue
{
    type = [TypeEnumHelper typeEnumFromString:(NSString*) strValue];
}




/**
* Key mappings for the json serialization and deserialization
*/
+(NSDictionary*) keyMap
{
    NSMutableDictionary* map = [[NSMutableDictionary alloc] init];
    [map addEntriesFromDictionary: @{
        @"id": @"mid",
        @"transaction_id": @"transactionId",
        @"memonotes": @"memonotes",
        @"reason": @"reason",
        @"type": @"type"  
    }];

    return map;
}

/**
* Key mapper for json serialization and deserialization
*/
+(JSONKeyMapper*) keyMapper
{ 
  return [[JSONKeyMapper alloc] initWithDictionary: [self keyMap]];
}

/**
* Helps avoiding deserialization errors when one or more properties are missing
* @returns	True, indicating that all properties are optional for deserialization
*/
+(BOOL)propertyIsOptional:(NSString*) propertyName
{
    return YES;
}

@end