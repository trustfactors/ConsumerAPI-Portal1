//
//  ConsumerMobile
//
//  This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
//
#import <Foundation/Foundation.h>
#import "Configuration.h"
#import "APIHelper.h"
#import "APIError.h"
#import "BaseController.h"
#import "UnirestClient.h"
#import "HttpContext.h"
#import "NSDate+extension.h"
#import "Challenge.h"
#import "SortByEnum.h"
#import "SortByEnumHelper.h"
#import "ErrorErrorException.h"

@interface ChallengeController : BaseController

/**
* Completion block definition for asynchronous call to getchallenges */
typedef void (^CompletedGetchallenges)(BOOL success, HttpContext* context, NSArray<Challenge> * response, NSError* error);

/**
* List of challenges.
* @param    limit    Optional parameter: Amount of records to return
* @param    startingAfter    Optional parameter: The Object ID from which to continue obtaining items from the list
* @param    endingBefore    Optional parameter: The Object ID from which to definitely end the list segment
* @param    q    Optional parameter: main query parameter
* @param    sortBy    Optional parameter: main sort parameter
*/
- (void) getchallengesAsyncWithLimit:(NSNumber*) limit
                startingAfter:(NSNumber*) startingAfter
                endingBefore:(NSNumber*) endingBefore
                q:(NSString*) q
                sortBy:(enum SortByEnum) sortBy
                completionBlock:(CompletedGetchallenges) onCompleted;

/**
* Completion block definition for asynchronous call to addchallenge */
typedef void (^CompletedPostAddchallenge)(BOOL success, HttpContext* context, NSArray<Challenge> * response, NSError* error);

/**
* Create a new challenge
* @param    body    Optional parameter: Example: 
*/
- (void) addchallengeAsyncWithBody:(Challenge*) body
                completionBlock:(CompletedPostAddchallenge) onCompleted;

/**
* Completion block definition for asynchronous call to getchallenge */
typedef void (^CompletedGetchallenge)(BOOL success, HttpContext* context, NSArray<Challenge> * response, NSError* error);

/**
* Obtain a single challenge by id
* @param    mid    Required parameter: Numeric ID of the challenge to get
*/
- (void) getchallengeAsyncWithId:(NSUUID*) mid
                completionBlock:(CompletedGetchallenge) onCompleted;

/**
* Completion block definition for asynchronous call to deletechallenge */
typedef void (^CompletedDeletechallenge)(BOOL success, HttpContext* context, NSArray<Challenge> * response, NSError* error);

/**
* Deletes a challenge
* @param    mid    Required parameter: ID of the challenge to delete
*/
- (void) deletechallengeAsyncWithId:(int) mid
                completionBlock:(CompletedDeletechallenge) onCompleted;

/**
* Completion block definition for asynchronous call to updatechallenge */
typedef void (^CompletedPatchUpdatechallenge)(BOOL success, HttpContext* context, NSArray<Challenge> * response, NSError* error);

/**
* Update an existing challenge
* @param    mid    Required parameter: Numeric ID of the challenge to update
* @param    body    Optional parameter: Example: 
*/
- (void) updatechallengeAsyncWithId:(NSUUID*) mid
                body:(Challenge*) body
                completionBlock:(CompletedPatchUpdatechallenge) onCompleted;

@end