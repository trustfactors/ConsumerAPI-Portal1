//
//  ConsumerMobile
//
//  This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
//
#import <Foundation/Foundation.h>
#import "Configuration.h"
#import "APIHelper.h"
#import "APIError.h"
#import "BaseController.h"
#import "UnirestClient.h"
#import "HttpContext.h"
#import "NSDate+extension.h"
#import "Error.h"
#import "SortByEnum.h"
#import "SortByEnumHelper.h"
#import "ErrorErrorException.h"

@interface ErrorController : BaseController

/**
* Completion block definition for asynchronous call to getErrors */
typedef void (^CompletedGetErrors)(BOOL success, HttpContext* context, NSArray<Error> * response, NSError* error);

/**
* List of Errors.
* @param    limit    Optional parameter: Amount of records to return
* @param    startingAfter    Optional parameter: The Object ID from which to continue obtaining items from the list
* @param    endingBefore    Optional parameter: The Object ID from which to definitely end the list segment
* @param    q    Optional parameter: main query parameter
* @param    sortBy    Optional parameter: main sort parameter
*/
- (void) getErrorsAsyncWithLimit:(NSNumber*) limit
                startingAfter:(NSNumber*) startingAfter
                endingBefore:(NSNumber*) endingBefore
                q:(NSString*) q
                sortBy:(enum SortByEnum) sortBy
                completionBlock:(CompletedGetErrors) onCompleted;

/**
* Completion block definition for asynchronous call to addError */
typedef void (^CompletedPostAddError)(BOOL success, HttpContext* context, NSArray<Error> * response, NSError* error);

/**
* Create a new Error
* @param    body    Optional parameter: Example: 
*/
- (void) addErrorAsyncWithBody:(Error*) body
                completionBlock:(CompletedPostAddError) onCompleted;

/**
* Completion block definition for asynchronous call to getError */
typedef void (^CompletedGetError)(BOOL success, HttpContext* context, NSArray<Error> * response, NSError* error);

/**
* Obtain a single Error by id
* @param    mid    Required parameter: Numeric ID of the Error to get
*/
- (void) getErrorAsyncWithId:(NSUUID*) mid
                completionBlock:(CompletedGetError) onCompleted;

/**
* Completion block definition for asynchronous call to deleteError */
typedef void (^CompletedDeleteError)(BOOL success, HttpContext* context, NSArray<Error> * response, NSError* error);

/**
* Deletes a Error
* @param    mid    Required parameter: ID of the Error to delete
*/
- (void) deleteErrorAsyncWithId:(int) mid
                completionBlock:(CompletedDeleteError) onCompleted;

/**
* Completion block definition for asynchronous call to updateError */
typedef void (^CompletedPatchUpdateError)(BOOL success, HttpContext* context, NSArray<Error> * response, NSError* error);

/**
* Update an existing Error
* @param    mid    Required parameter: Numeric ID of the Error to update
* @param    body    Optional parameter: Example: 
*/
- (void) updateErrorAsyncWithId:(NSUUID*) mid
                body:(Error*) body
                completionBlock:(CompletedPatchUpdateError) onCompleted;

@end