//
//  ConsumerMobile
//
//  This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
//
#import <Foundation/Foundation.h>
#import "Configuration.h"
#import "APIHelper.h"
#import "APIError.h"
#import "BaseController.h"
#import "UnirestClient.h"
#import "HttpContext.h"
#import "NSDate+extension.h"
#import "Statement.h"
#import "SortByEnum.h"
#import "SortByEnumHelper.h"
#import "ErrorErrorException.h"
#import "Transaction.h"

@interface StatementController : BaseController

/**
* Completion block definition for asynchronous call to getstatements */
typedef void (^CompletedGetstatements)(BOOL success, HttpContext* context, NSArray<Statement> * response, NSError* error);

/**
* List of statements.
* @param    limit    Optional parameter: Amount of records to return
* @param    startingAfter    Optional parameter: The Object ID from which to continue obtaining items from the list
* @param    endingBefore    Optional parameter: The Object ID from which to definitely end the list segment
* @param    q    Optional parameter: main query parameter
* @param    sortBy    Optional parameter: main sort parameter
*/
- (void) getstatementsAsyncWithLimit:(NSNumber*) limit
                startingAfter:(NSNumber*) startingAfter
                endingBefore:(NSNumber*) endingBefore
                q:(NSString*) q
                sortBy:(enum SortByEnum) sortBy
                completionBlock:(CompletedGetstatements) onCompleted;

/**
* Completion block definition for asynchronous call to addstatement */
typedef void (^CompletedPostAddstatement)(BOOL success, HttpContext* context, NSArray<Statement> * response, NSError* error);

/**
* Create a new statement
* @param    body    Optional parameter: Example: 
*/
- (void) addstatementAsyncWithBody:(Statement*) body
                completionBlock:(CompletedPostAddstatement) onCompleted;

/**
* Completion block definition for asynchronous call to getstatement */
typedef void (^CompletedGetstatement)(BOOL success, HttpContext* context, NSArray<Statement> * response, NSError* error);

/**
* Obtain a single statement by id
* @param    mid    Required parameter: Numeric ID of the statement to get
*/
- (void) getstatementAsyncWithId:(NSUUID*) mid
                completionBlock:(CompletedGetstatement) onCompleted;

/**
* Completion block definition for asynchronous call to deletestatement */
typedef void (^CompletedDeletestatement)(BOOL success, HttpContext* context, NSArray<Statement> * response, NSError* error);

/**
* Deletes a statement
* @param    mid    Required parameter: ID of the statement to delete
*/
- (void) deletestatementAsyncWithId:(int) mid
                completionBlock:(CompletedDeletestatement) onCompleted;

/**
* Completion block definition for asynchronous call to updatestatement */
typedef void (^CompletedPatchUpdatestatement)(BOOL success, HttpContext* context, NSArray<Statement> * response, NSError* error);

/**
* Update an existing statement
* @param    mid    Required parameter: Numeric ID of the statement to update
* @param    body    Optional parameter: Example: 
*/
- (void) updatestatementAsyncWithId:(NSUUID*) mid
                body:(Statement*) body
                completionBlock:(CompletedPatchUpdatestatement) onCompleted;

/**
* Completion block definition for asynchronous call to gettransactions_s1 */
typedef void (^CompletedGettransactionsS1)(BOOL success, HttpContext* context, NSArray<Transaction> * response, NSError* error);

/**
* List of transactions within a given statement.
* @param    mid    Required parameter: ID of the statement to get
* @param    limit    Optional parameter: Amount of records to return
* @param    startingAfter    Optional parameter: The Object ID from which to continue obtaining items from the list
* @param    endingBefore    Optional parameter: The Object ID from which to definitely end the list segment
* @param    q    Optional parameter: main query parameter
* @param    sortBy    Optional parameter: main sort parameter
*/
- (void) gettransactionsS1AsyncWithId:(int) mid
                limit:(NSNumber*) limit
                startingAfter:(NSNumber*) startingAfter
                endingBefore:(NSNumber*) endingBefore
                q:(NSString*) q
                sortBy:(enum SortByEnum) sortBy
                completionBlock:(CompletedGettransactionsS1) onCompleted;

/**
* Completion block definition for asynchronous call to addtransaction_s1 */
typedef void (^CompletedPostAddtransactionS1)(BOOL success, HttpContext* context, NSArray<Transaction> * response, NSError* error);

/**
* Create a new transaction within a statement
* @param    mid    Required parameter: Numeric ID of the statement to get
* @param    body    Optional parameter: Example: 
*/
- (void) addtransactionS1AsyncWithId:(NSUUID*) mid
                body:(Transaction*) body
                completionBlock:(CompletedPostAddtransactionS1) onCompleted;

@end