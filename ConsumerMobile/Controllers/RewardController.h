//
//  ConsumerMobile
//
//  This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
//
#import <Foundation/Foundation.h>
#import "Configuration.h"
#import "APIHelper.h"
#import "APIError.h"
#import "BaseController.h"
#import "UnirestClient.h"
#import "HttpContext.h"
#import "NSDate+extension.h"
#import "Reward.h"
#import "SortByEnum.h"
#import "SortByEnumHelper.h"
#import "ErrorErrorException.h"

@interface RewardController : BaseController

/**
* Completion block definition for asynchronous call to getrewards */
typedef void (^CompletedGetrewards)(BOOL success, HttpContext* context, NSArray<Reward> * response, NSError* error);

/**
* List of rewards.
* @param    limit    Optional parameter: Amount of records to return
* @param    startingAfter    Optional parameter: The Object ID from which to continue obtaining items from the list
* @param    endingBefore    Optional parameter: The Object ID from which to definitely end the list segment
* @param    q    Optional parameter: main query parameter
* @param    sortBy    Optional parameter: main sort parameter
*/
- (void) getrewardsAsyncWithLimit:(NSNumber*) limit
                startingAfter:(NSNumber*) startingAfter
                endingBefore:(NSNumber*) endingBefore
                q:(NSString*) q
                sortBy:(enum SortByEnum) sortBy
                completionBlock:(CompletedGetrewards) onCompleted;

/**
* Completion block definition for asynchronous call to addreward */
typedef void (^CompletedPostAddreward)(BOOL success, HttpContext* context, NSArray<Reward> * response, NSError* error);

/**
* Create a new reward
* @param    body    Optional parameter: Example: 
*/
- (void) addrewardAsyncWithBody:(Reward*) body
                completionBlock:(CompletedPostAddreward) onCompleted;

/**
* Completion block definition for asynchronous call to getreward */
typedef void (^CompletedGetreward)(BOOL success, HttpContext* context, NSArray<Reward> * response, NSError* error);

/**
* Obtain a single reward by id
* @param    mid    Required parameter: Numeric ID of the reward to get
*/
- (void) getrewardAsyncWithId:(NSUUID*) mid
                completionBlock:(CompletedGetreward) onCompleted;

/**
* Completion block definition for asynchronous call to deletereward */
typedef void (^CompletedDeletereward)(BOOL success, HttpContext* context, NSArray<Reward> * response, NSError* error);

/**
* Deletes a reward
* @param    mid    Required parameter: ID of the reward to delete
*/
- (void) deleterewardAsyncWithId:(int) mid
                completionBlock:(CompletedDeletereward) onCompleted;

/**
* Completion block definition for asynchronous call to updatereward */
typedef void (^CompletedPatchUpdatereward)(BOOL success, HttpContext* context, NSArray<Reward> * response, NSError* error);

/**
* Update an existing reward
* @param    mid    Required parameter: Numeric ID of the reward to update
* @param    body    Optional parameter: Example: 
*/
- (void) updaterewardAsyncWithId:(NSUUID*) mid
                body:(Reward*) body
                completionBlock:(CompletedPatchUpdatereward) onCompleted;

@end