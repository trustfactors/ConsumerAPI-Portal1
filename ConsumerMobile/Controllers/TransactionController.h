//
//  ConsumerMobile
//
//  This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
//
#import <Foundation/Foundation.h>
#import "Configuration.h"
#import "APIHelper.h"
#import "APIError.h"
#import "BaseController.h"
#import "UnirestClient.h"
#import "HttpContext.h"
#import "NSDate+extension.h"
#import "Transaction.h"
#import "SortByEnum.h"
#import "SortByEnumHelper.h"
#import "ErrorErrorException.h"
#import "Challenge.h"

@interface TransactionController : BaseController

/**
* Completion block definition for asynchronous call to gettransactions */
typedef void (^CompletedGettransactions)(BOOL success, HttpContext* context, NSArray<Transaction> * response, NSError* error);

/**
* List of transactions.
* @param    limit    Optional parameter: Amount of records to return
* @param    startingAfter    Optional parameter: The Object ID from which to continue obtaining items from the list
* @param    endingBefore    Optional parameter: The Object ID from which to definitely end the list segment
* @param    q    Optional parameter: main query parameter
* @param    sortBy    Optional parameter: main sort parameter
*/
- (void) gettransactionsAsyncWithLimit:(NSNumber*) limit
                startingAfter:(NSNumber*) startingAfter
                endingBefore:(NSNumber*) endingBefore
                q:(NSString*) q
                sortBy:(enum SortByEnum) sortBy
                completionBlock:(CompletedGettransactions) onCompleted;

/**
* Completion block definition for asynchronous call to addtransaction */
typedef void (^CompletedPostAddtransaction)(BOOL success, HttpContext* context, NSArray<Transaction> * response, NSError* error);

/**
* Create a new transaction
* @param    body    Optional parameter: Example: 
*/
- (void) addtransactionAsyncWithBody:(Transaction*) body
                completionBlock:(CompletedPostAddtransaction) onCompleted;

/**
* Completion block definition for asynchronous call to gettransaction */
typedef void (^CompletedGettransaction)(BOOL success, HttpContext* context, NSArray<Transaction> * response, NSError* error);

/**
* Obtain a single transaction by id
* @param    mid    Required parameter: Numeric ID of the transaction to get
*/
- (void) gettransactionAsyncWithId:(NSUUID*) mid
                completionBlock:(CompletedGettransaction) onCompleted;

/**
* Completion block definition for asynchronous call to deletetransaction */
typedef void (^CompletedDeletetransaction)(BOOL success, HttpContext* context, NSArray<Transaction> * response, NSError* error);

/**
* Deletes a transaction
* @param    mid    Required parameter: ID of the transaction to delete
*/
- (void) deletetransactionAsyncWithId:(int) mid
                completionBlock:(CompletedDeletetransaction) onCompleted;

/**
* Completion block definition for asynchronous call to updatetransaction */
typedef void (^CompletedPatchUpdatetransaction)(BOOL success, HttpContext* context, NSArray<Transaction> * response, NSError* error);

/**
* Update an existing transaction
* @param    mid    Required parameter: Numeric ID of the transaction to update
* @param    body    Optional parameter: Example: 
*/
- (void) updatetransactionAsyncWithId:(NSUUID*) mid
                body:(Transaction*) body
                completionBlock:(CompletedPatchUpdatetransaction) onCompleted;

/**
* Completion block definition for asynchronous call to getdisputes_s */
typedef void (^CompletedGetdisputesS)(BOOL success, HttpContext* context, NSArray<Challenge> * response, NSError* error);

/**
* List of disputes within a given transaction.
* @param    mid    Required parameter: ID of the transaction to get
* @param    limit    Optional parameter: Amount of records to return
* @param    startingAfter    Optional parameter: The Object ID from which to continue obtaining items from the list
* @param    endingBefore    Optional parameter: The Object ID from which to definitely end the list segment
* @param    q    Optional parameter: main query parameter
* @param    sortBy    Optional parameter: main sort parameter
*/
- (void) getdisputesSAsyncWithId:(int) mid
                limit:(NSNumber*) limit
                startingAfter:(NSNumber*) startingAfter
                endingBefore:(NSNumber*) endingBefore
                q:(NSString*) q
                sortBy:(enum SortByEnum) sortBy
                completionBlock:(CompletedGetdisputesS) onCompleted;

/**
* Completion block definition for asynchronous call to adddispute_s */
typedef void (^CompletedPostAdddisputeS)(BOOL success, HttpContext* context, NSArray<Challenge> * response, NSError* error);

/**
* Create a new dispute within a transaction
* @param    mid    Required parameter: Numeric ID of the transaction to get
* @param    body    Optional parameter: Example: 
*/
- (void) adddisputeSAsyncWithId:(NSUUID*) mid
                body:(Challenge*) body
                completionBlock:(CompletedPostAdddisputeS) onCompleted;

@end