//
//  ConsumerMobile
//
//  This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
//
#import <Foundation/Foundation.h>
#import "Configuration.h"
#import "APIHelper.h"
#import "APIError.h"
#import "BaseController.h"
#import "UnirestClient.h"
#import "HttpContext.h"
#import "NSDate+extension.h"
#import "Dispute.h"
#import "SortByEnum.h"
#import "SortByEnumHelper.h"
#import "ErrorErrorException.h"

@interface DisputeController : BaseController

/**
* Completion block definition for asynchronous call to getdisputes */
typedef void (^CompletedGetdisputes)(BOOL success, HttpContext* context, NSArray<Dispute> * response, NSError* error);

/**
* List of disputes.
* @param    limit    Optional parameter: Amount of records to return
* @param    startingAfter    Optional parameter: The Object ID from which to continue obtaining items from the list
* @param    endingBefore    Optional parameter: The Object ID from which to definitely end the list segment
* @param    q    Optional parameter: main query parameter
* @param    sortBy    Optional parameter: main sort parameter
*/
- (void) getdisputesAsyncWithLimit:(NSNumber*) limit
                startingAfter:(NSNumber*) startingAfter
                endingBefore:(NSNumber*) endingBefore
                q:(NSString*) q
                sortBy:(enum SortByEnum) sortBy
                completionBlock:(CompletedGetdisputes) onCompleted;

/**
* Completion block definition for asynchronous call to adddispute */
typedef void (^CompletedPostAdddispute)(BOOL success, HttpContext* context, NSArray<Dispute> * response, NSError* error);

/**
* Create a new dispute
* @param    body    Optional parameter: Example: 
*/
- (void) adddisputeAsyncWithBody:(Dispute*) body
                completionBlock:(CompletedPostAdddispute) onCompleted;

/**
* Completion block definition for asynchronous call to getdispute */
typedef void (^CompletedGetdispute)(BOOL success, HttpContext* context, NSArray<Dispute> * response, NSError* error);

/**
* Obtain a single dispute by id
* @param    mid    Required parameter: Numeric ID of the dispute to get
*/
- (void) getdisputeAsyncWithId:(NSUUID*) mid
                completionBlock:(CompletedGetdispute) onCompleted;

/**
* Completion block definition for asynchronous call to deletedispute */
typedef void (^CompletedDeletedispute)(BOOL success, HttpContext* context, NSArray<Dispute> * response, NSError* error);

/**
* Deletes a dispute
* @param    mid    Required parameter: ID of the dispute to delete
*/
- (void) deletedisputeAsyncWithId:(int) mid
                completionBlock:(CompletedDeletedispute) onCompleted;

/**
* Completion block definition for asynchronous call to updatedispute */
typedef void (^CompletedPatchUpdatedispute)(BOOL success, HttpContext* context, NSArray<Dispute> * response, NSError* error);

/**
* Update an existing dispute
* @param    mid    Required parameter: Numeric ID of the dispute to update
* @param    body    Optional parameter: Example: 
*/
- (void) updatedisputeAsyncWithId:(NSUUID*) mid
                body:(Dispute*) body
                completionBlock:(CompletedPatchUpdatedispute) onCompleted;

@end